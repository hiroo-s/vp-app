import { driver } from '@transmute/did-key-ed25519';
import { driver as driver$1 } from '@transmute/did-key-x25519';
import { driver as driver$2 } from '@transmute/did-key-bls12381';
import { driver as driver$3 } from '@transmute/did-key-secp256k1';
import { driver as driver$4 } from '@transmute/did-key-web-crypto';

var prefixToDriverMap = {
  z6M: driver,
  z6L: driver$1,
  zUC: driver$2,
  z3t: driver$2,
  z5T: driver$2,
  zQ3: driver$3,
  zru: driver$4,
  zFw: driver$4,
  zWG: driver$4
};
var resolver = {
  resolve: function (didUrl, resolutionMetaData) {
    if (resolutionMetaData === void 0) {
      resolutionMetaData = {
        accept: 'application/did+ld+json'
      };
    }

    try {
      if (didUrl.indexOf('did:key:') !== 0) {
        throw new Error('did must be of method did:key.');
      }

      var idchar = didUrl.split('did:key:').pop();
      var encodedType = idchar.substring(0, 3);

      if (prefixToDriverMap[encodedType]) {
        return Promise.resolve(prefixToDriverMap[encodedType].resolve(didUrl, resolutionMetaData));
      } else {
        throw new Error('Unknown DID Key type: ' + encodedType);
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
};

export { resolver };
//# sourceMappingURL=did-key.js.esm.js.map
