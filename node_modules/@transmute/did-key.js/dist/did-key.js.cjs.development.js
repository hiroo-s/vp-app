'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var didKeyEd25519 = require('@transmute/did-key-ed25519');
var didKeyX25519 = require('@transmute/did-key-x25519');
var didKeyBls12381 = require('@transmute/did-key-bls12381');
var didKeySecp256k1 = require('@transmute/did-key-secp256k1');
var didKeyWebCrypto = require('@transmute/did-key-web-crypto');

var prefixToDriverMap = {
  z6M: didKeyEd25519.driver,
  z6L: didKeyX25519.driver,
  zUC: didKeyBls12381.driver,
  z3t: didKeyBls12381.driver,
  z5T: didKeyBls12381.driver,
  zQ3: didKeySecp256k1.driver,
  zru: didKeyWebCrypto.driver,
  zFw: didKeyWebCrypto.driver,
  zWG: didKeyWebCrypto.driver
};
var resolver = {
  resolve: function (didUrl, resolutionMetaData) {
    if (resolutionMetaData === void 0) {
      resolutionMetaData = {
        accept: 'application/did+ld+json'
      };
    }

    try {
      if (didUrl.indexOf('did:key:') !== 0) {
        throw new Error('did must be of method did:key.');
      }

      var idchar = didUrl.split('did:key:').pop();
      var encodedType = idchar.substring(0, 3);

      if (prefixToDriverMap[encodedType]) {
        return Promise.resolve(prefixToDriverMap[encodedType].resolve(didUrl, resolutionMetaData));
      } else {
        throw new Error('Unknown DID Key type: ' + encodedType);
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }
};

exports.resolver = resolver;
//# sourceMappingURL=did-key.js.cjs.development.js.map
