{"version":3,"file":"did-key-bls12381.cjs.production.min.js","sources":["../src/types/BlsCurveName.ts","../src/functions/generateKeyPairs.ts","../src/functions/toJsonWebKeyPair.ts","../src/functions/fingerprintToJsonWebKeyPair.ts","../src/constants/index.ts","../src/functions/publicKeyJwkToDidKey.ts","../src/Bls12381G1KeyPair.ts","../src/Bls12381G2KeyPair.ts","../src/Bls12381KeyPairs.ts","../src/functions/keyToDidDoc.ts","../src/driver.ts"],"sourcesContent":["export enum BlsCurveName {\n  G1 = 'BLS12381_G1',\n  G2 = 'BLS12381_G2',\n}\n","import bs58 from 'bs58';\nimport {\n  generateBls12381G1KeyPair,\n  generateBls12381G2KeyPair,\n} from '@mattrglobal/bbs-signatures';\n\nexport const generateKeyPairs = async () => {\n  const g1 = await generateBls12381G1KeyPair();\n  const g2 = await generateBls12381G2KeyPair();\n\n  const bls12381G1KeyPair = {\n    id: '',\n    type: 'Bls12381G1Key2020',\n    controller: '',\n    publicKeyBase58: bs58.encode(g1.publicKey),\n    privateKeyBase58: bs58.encode(g1.secretKey),\n  };\n\n  const bls12381G2KeyPair = {\n    id: '',\n    type: 'Bls12381G2Key2020',\n    controller: '',\n    publicKeyBase58: bs58.encode(g2.publicKey),\n    privateKeyBase58: bs58.encode(g2.secretKey),\n  };\n  return {\n    bls12381G1KeyPair,\n    bls12381G2KeyPair,\n  };\n};\n","import { BlsCurveName } from '../types';\nimport base64url from 'base64url';\nimport bs58 from 'bs58';\nconst curveMap: any = {\n  Bls12381G1Key2020: BlsCurveName.G1,\n  Bls12381G2Key2020: BlsCurveName.G2,\n};\n\nexport const toJsonWebKeyPair = (keypair: any) => {\n  const jsonWebKeyPair: any = {\n    id: keypair.id,\n    controller: keypair.controller,\n    type: 'JsonWebKey2020',\n    publicKeyJwk: {\n      kty: 'EC',\n      crv: curveMap[keypair.type],\n      x: base64url.encode(bs58.decode(keypair.publicKeyBase58)),\n    },\n  };\n\n  if (keypair.privateKeyBase58) {\n    jsonWebKeyPair.privateKeyJwk = {\n      kty: 'EC',\n      crv: curveMap[keypair.type],\n      x: base64url.encode(bs58.decode(keypair.publicKeyBase58)),\n      d: base64url.encode(bs58.decode(keypair.privateKeyBase58)),\n    };\n  }\n\n  return jsonWebKeyPair;\n};\n","import bs58 from 'bs58';\n\nimport {\n  BLS12381G1ANDG2_MULTICODEC_IDENTIFIER,\n  BLS12381G1_MULTICODEC_IDENTIFIER,\n  BLS12381G2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from '../constants';\n\nimport { toJsonWebKeyPair } from './toJsonWebKeyPair';\nexport const fingerprintToJsonWebKeyPair = (fingerprint: string) => {\n  if (fingerprint[0] !== 'z') {\n    throw new Error('base58 encoded fingerprint must start with \"z\"');\n  }\n\n  const buffer = bs58.decode(fingerprint.substring(1));\n\n  if (\n    buffer[0] === BLS12381G1_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let kp = toJsonWebKeyPair({\n      type: 'Bls12381G1Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2)),\n    });\n    return {\n      bls12381G1KeyPair: {\n        ...kp,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  if (\n    buffer[0] === BLS12381G2_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let kp = toJsonWebKeyPair({\n      type: 'Bls12381G2Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2)),\n    });\n    return {\n      bls12381G2KeyPair: {\n        ...kp,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  if (\n    buffer[0] === BLS12381G1ANDG2_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let g1 = toJsonWebKeyPair({\n      type: 'Bls12381G1Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2, 50)),\n    });\n    let g2 = toJsonWebKeyPair({\n      type: 'Bls12381G2Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(50)),\n    });\n    return {\n      bls12381G1KeyPair: {\n        ...g1,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n      bls12381G2KeyPair: {\n        ...g2,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  throw new Error('unsupported fingerprint is not g1, g2 or g1 and g2.');\n};\n","// Pulled from https://github.com/mattrglobal/bls12381-key-pair\n// License is Apache-2.0\n\n/**\n * z represents the multibase encoding scheme of base58 encoding\n * @see https://github.com/multiformats/multibase/blob/master/multibase.csv#L18\n * @ignore\n */\nconst MULTIBASE_ENCODED_BASE58_IDENTIFIER = 'z';\n\n/**\n * 0x01 indicates the end of the leading bytes according to variable integer spec\n * @see https://github.com/multiformats/multicodec\n * @ignore\n */\nconst VARIABLE_INTEGER_TRAILING_BYTE = 0x01;\n\n/**\n * 0xea indicates a BLS 12-381 G1 public key\n *\n */\nconst BLS12381G1_MULTICODEC_IDENTIFIER = 0xea;\n\n/**\n * 0xeb indicates a BLS 12-381 G2 public key\n *\n */\nconst BLS12381G2_MULTICODEC_IDENTIFIER = 0xeb;\n\n/**\n * 0xee indicates a BLS 12-381 G1 concat with BLS 12-381 G2\n *\n */\nconst BLS12381G1ANDG2_MULTICODEC_IDENTIFIER = 0xee;\n\nexport {\n  MULTIBASE_ENCODED_BASE58_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n  BLS12381G1_MULTICODEC_IDENTIFIER,\n  BLS12381G2_MULTICODEC_IDENTIFIER,\n  BLS12381G1ANDG2_MULTICODEC_IDENTIFIER,\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport {\n  MULTIBASE_ENCODED_BASE58_IDENTIFIER,\n  BLS12381G1_MULTICODEC_IDENTIFIER,\n  BLS12381G2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from '../constants';\nimport { BlsCurveName } from '../types';\n\nconst curveToMulticodecMap: any = {\n  [BlsCurveName.G1]: BLS12381G1_MULTICODEC_IDENTIFIER,\n  [BlsCurveName.G2]: BLS12381G2_MULTICODEC_IDENTIFIER,\n};\n\nexport const publicKeyJwkToDidKey = (publicKeyJwk: any) => {\n  const publicKey = base64url.toBuffer(publicKeyJwk.x);\n\n  const buffer = new Uint8Array(2 + publicKey.length);\n  buffer[0] = curveToMulticodecMap[publicKeyJwk.crv];\n  buffer[1] = VARIABLE_INTEGER_TRAILING_BYTE;\n\n  buffer.set(publicKey, 2);\n\n  return `did:key:${MULTIBASE_ENCODED_BASE58_IDENTIFIER}${bs58.encode(buffer)}`;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport * as mattr from '@mattrglobal/bls12381-key-pair';\nimport { generateKeyPairs } from './functions/generateKeyPairs';\nimport { toJsonWebKeyPair } from './functions/toJsonWebKeyPair';\nimport { publicKeyJwkToDidKey } from './functions/publicKeyJwkToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\n\nexport class Bls12381G1KeyPair {\n  public id: string;\n  public type: string = 'Bls12381G1Key2020';\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static async generate() {\n    const { bls12381G1KeyPair } = await generateKeyPairs();\n    const { publicKeyJwk } = toJsonWebKeyPair(bls12381G1KeyPair);\n    bls12381G1KeyPair.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    bls12381G1KeyPair.id =\n      '#' + bls12381G1KeyPair.controller.split('did:key:').pop();\n    return new Bls12381G1KeyPair({\n      id: bls12381G1KeyPair.id,\n      controller: bls12381G1KeyPair.controller,\n      publicKeyBuffer: bs58.decode(bls12381G1KeyPair.publicKeyBase58),\n      privateKeyBuffer: bs58.decode(bls12381G1KeyPair.privateKeyBase58),\n    });\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    const { bls12381G1KeyPair } = fingerprintToJsonWebKeyPair(fingerprint);\n    return new Bls12381G1KeyPair({\n      id: bls12381G1KeyPair.id,\n      controller: bls12381G1KeyPair.controller,\n      publicKeyBuffer: base64url.toBuffer(bls12381G1KeyPair.publicKeyJwk.x),\n    });\n  }\n\n  static async from(options: any) {\n    if (options.type === 'JsonWebKey2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: base64url.toBuffer(options.publicKeyJwk.x),\n      };\n      if (options.privateKeyJwk) {\n        opts.privateKeyBuffer = base64url.toBuffer(options.privateKeyJwk.d);\n      }\n      return new Bls12381G1KeyPair(opts);\n    }\n\n    if (options.type === 'Bls12381G1Key2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: bs58.decode(options.publicKeyBase58),\n      };\n      if (options.privateKeyBase58) {\n        opts.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n      }\n      return new Bls12381G1KeyPair(opts);\n    }\n\n    throw new Error('unsuported key type');\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.publicKeyBuffer = options.publicKeyBuffer;\n    this.privateKeyBuffer = options.privateKeyBuffer;\n    if (!this.controller) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    }\n    if (!this.id) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.id =\n        '#' +\n        publicKeyJwkToDidKey(publicKeyJwk)\n          .split('did:key:')\n          .pop();\n    }\n  }\n\n  fingerprint() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n    return publicKeyJwkToDidKey(publicKeyJwk)\n      .split('did:key:')\n      .pop();\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const result = toJsonWebKeyPair(this.toKeyPair(exportPrivateKey));\n    return result;\n  }\n\n  verifier() {\n    const key = new mattr.Bls12381G1KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    });\n    return key.verifier();\n  }\n\n  signer() {\n    const key = new mattr.Bls12381G1KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n    });\n    return key.signer();\n  }\n}\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport * as mattr from '@mattrglobal/bls12381-key-pair';\nimport { generateKeyPairs } from './functions/generateKeyPairs';\nimport { toJsonWebKeyPair } from './functions/toJsonWebKeyPair';\nimport { publicKeyJwkToDidKey } from './functions/publicKeyJwkToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\n\nexport class Bls12381G2KeyPair {\n  public id: string;\n  public type: string = 'Bls12381G2Key2020';\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static async generate() {\n    const { bls12381G2KeyPair } = await generateKeyPairs();\n    const { publicKeyJwk } = toJsonWebKeyPair(bls12381G2KeyPair);\n    bls12381G2KeyPair.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    bls12381G2KeyPair.id =\n      '#' + bls12381G2KeyPair.controller.split('did:key:').pop();\n    return new Bls12381G2KeyPair({\n      id: bls12381G2KeyPair.id,\n      controller: bls12381G2KeyPair.controller,\n      publicKeyBuffer: bs58.decode(bls12381G2KeyPair.publicKeyBase58),\n      privateKeyBuffer: bs58.decode(bls12381G2KeyPair.privateKeyBase58),\n    });\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    const { bls12381G2KeyPair } = fingerprintToJsonWebKeyPair(fingerprint);\n    return new Bls12381G2KeyPair({\n      id: bls12381G2KeyPair.id,\n      controller: bls12381G2KeyPair.controller,\n      publicKeyBuffer: base64url.toBuffer(bls12381G2KeyPair.publicKeyJwk.x),\n    });\n  }\n\n  static async from(options: any) {\n    if (options.type === 'JsonWebKey2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: base64url.toBuffer(options.publicKeyJwk.x),\n      };\n      if (options.privateKeyJwk) {\n        opts.privateKeyBuffer = base64url.toBuffer(options.privateKeyJwk.d);\n      }\n      return new Bls12381G2KeyPair(opts);\n    }\n\n    if (options.type === 'Bls12381G2Key2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: bs58.decode(options.publicKeyBase58),\n      };\n      if (options.privateKeyBase58) {\n        opts.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n      }\n      return new Bls12381G2KeyPair(opts);\n    }\n\n    throw new Error('unsuported key type');\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.publicKeyBuffer = options.publicKeyBuffer;\n    this.privateKeyBuffer = options.privateKeyBuffer;\n\n    if (!this.controller) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    }\n    if (!this.id) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.id =\n        '#' +\n        publicKeyJwkToDidKey(publicKeyJwk)\n          .split('did:key:')\n          .pop();\n    }\n  }\n\n  fingerprint() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n    return publicKeyJwkToDidKey(publicKeyJwk)\n      .split('did:key:')\n      .pop();\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    return toJsonWebKeyPair(this.toKeyPair(exportPrivateKey));\n  }\n\n  verifier() {\n    const key = new mattr.Bls12381G2KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    });\n    return key.verifier();\n  }\n\n  signer() {\n    const key = new mattr.Bls12381G2KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n    });\n    return key.signer();\n  }\n}\n","import bs58 from 'bs58';\n// import base64url from 'base64url'\n// import * as mattr from '@mattrglobal/bls12381-key-pair'\nimport { generateKeyPairs } from './functions/generateKeyPairs';\n// import { keypairsToDidKey } from './functions/keypairsToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\nimport { Bls12381G1KeyPair } from './Bls12381G1KeyPair';\nimport { Bls12381G2KeyPair } from './Bls12381G2KeyPair';\n\nimport {\n  MULTIBASE_ENCODED_BASE58_IDENTIFIER,\n  BLS12381G1ANDG2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from './constants';\n\nexport class Bls12381KeyPairs {\n  public id: string;\n  public type: string = 'Bls12381KeyPairs2020';\n  public controller: string;\n  public g1KeyPair: Bls12381G1KeyPair;\n  public g2KeyPair: Bls12381G2KeyPair;\n\n  static async generate() {\n    const { bls12381G1KeyPair, bls12381G2KeyPair } = await generateKeyPairs();\n    const options = {\n      id: '',\n      controller: '',\n      g1KeyPair: new Bls12381G1KeyPair({\n        id: bls12381G1KeyPair.id,\n        publicKeyBuffer: bs58.decode(bls12381G1KeyPair.publicKeyBase58),\n        privateKeyBuffer: bs58.decode(bls12381G1KeyPair.privateKeyBase58),\n      }),\n      g2KeyPair: new Bls12381G2KeyPair({\n        id: bls12381G2KeyPair.id,\n        publicKeyBuffer: bs58.decode(bls12381G2KeyPair.publicKeyBase58),\n        privateKeyBuffer: bs58.decode(bls12381G2KeyPair.privateKeyBase58),\n      }),\n    };\n    return new Bls12381KeyPairs(options);\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    if (fingerprint.indexOf('z5Tc') === 0) {\n      const {\n        bls12381G1KeyPair,\n        bls12381G2KeyPair,\n      } = fingerprintToJsonWebKeyPair(fingerprint);\n      delete bls12381G1KeyPair.id;\n      delete bls12381G2KeyPair.id;\n      const controller = 'did:key:' + fingerprint;\n      bls12381G1KeyPair.controller = controller;\n      bls12381G2KeyPair.controller = controller;\n      return new Bls12381KeyPairs({\n        id: '#' + fingerprint,\n        controller,\n        g1KeyPair: await Bls12381G1KeyPair.from(bls12381G1KeyPair),\n        g2KeyPair: await Bls12381G2KeyPair.from(bls12381G2KeyPair),\n      });\n    }\n    if (fingerprint.indexOf('z3t') === 0) {\n      return Bls12381G1KeyPair.fromFingerprint({ fingerprint });\n    }\n    if (fingerprint.indexOf('zUC') === 0) {\n      return Bls12381G2KeyPair.fromFingerprint({ fingerprint });\n    }\n    throw new Error(\n      'Bls12381KeyPairs only supports g1, g2 and g1 and g2 mulicodec fingerprints.'\n    );\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.g1KeyPair = options.g1KeyPair;\n    this.g2KeyPair = options.g2KeyPair;\n    if (!this.id) {\n      this.id = '#' + this.fingerprint();\n    }\n\n    if (!this.controller) {\n      this.controller = 'did:key:' + this.fingerprint();\n    }\n\n    this.g1KeyPair.controller = this.controller;\n    this.g2KeyPair.controller = this.controller;\n  }\n\n  fingerprint() {\n    const g1Buffer = this.g1KeyPair.publicKeyBuffer;\n    const g2Buffer = this.g2KeyPair.publicKeyBuffer;\n    const g1AndG2 = Buffer.concat([g1Buffer, g2Buffer]);\n    const buffer = new Uint8Array(2 + g1AndG2.length);\n    buffer[0] = BLS12381G1ANDG2_MULTICODEC_IDENTIFIER;\n    buffer[1] = VARIABLE_INTEGER_TRAILING_BYTE;\n\n    buffer.set(g1AndG2, 2);\n    return `${MULTIBASE_ENCODED_BASE58_IDENTIFIER}${bs58.encode(buffer)}`;\n  }\n\n  export(exportPrivate = false) {\n    return {\n      fingerprint: this.fingerprint(),\n      g1: this.g1KeyPair.toJsonWebKeyPair(exportPrivate),\n      g2: this.g2KeyPair.toJsonWebKeyPair(exportPrivate),\n    };\n  }\n}\n","import { Bls12381KeyPairs } from '../Bls12381KeyPairs';\n\nexport const getVerificationMethod = (\n  instance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  switch (contentType) {\n    case 'application/did+json': {\n      return instance.toJsonWebKeyPair();\n    }\n    case 'application/did+cbor': {\n      return instance.toJsonWebKeyPair();\n    }\n    case 'application/did+ld+json': {\n      return instance.toKeyPair();\n    }\n  }\n  throw new Error(\n    'This implementation of did:key for bls12381 does not support: ' +\n      contentType\n  );\n};\n\nexport const keyToDidDoc = async (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  let verificationRelationships: any = {\n    verificationMethod: [],\n  };\n  const did = `did:key:${didKeyPairInstance.fingerprint()}`;\n  if (didKeyPairInstance.type === 'Bls12381KeyPairs2020') {\n    const g1 = getVerificationMethod(\n      (didKeyPairInstance as Bls12381KeyPairs).g1KeyPair,\n      contentType\n    );\n    const g2 = getVerificationMethod(\n      (didKeyPairInstance as Bls12381KeyPairs).g2KeyPair,\n      contentType\n    );\n    verificationRelationships.verificationMethod.push(g1);\n    verificationRelationships.verificationMethod.push(g2);\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [g1.id, g2.id],\n      assertionMethod: [g1.id, g2.id],\n      capabilityInvocation: [g1.id, g2.id],\n      capabilityDelegation: [g1.id, g2.id],\n    };\n  } else {\n    const vm = getVerificationMethod(didKeyPairInstance, contentType);\n    verificationRelationships.verificationMethod.push(vm);\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [vm.id],\n      assertionMethod: [vm.id],\n      capabilityInvocation: [vm.id],\n      capabilityDelegation: [vm.id],\n    };\n  }\n\n  const didDocument = {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      'https://ns.did.ai/transmute/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    ...verificationRelationships,\n  };\n\n  return didDocument;\n};\n","import { Bls12381KeyPairs } from './Bls12381KeyPairs';\nimport { keyToDidDoc } from './functions/keyToDidDoc';\n\nexport const getGet = (resolve: any) => {\n  const get = async ({ did, url }: any = {}) => {\n    did = did || url;\n    if (!did) {\n      throw new TypeError('\"did\" must be a string.');\n    }\n    const result = await resolve(did);\n    return result.didDocument;\n  };\n  return get;\n};\n\nexport const getResolve = () => {\n  const resolve = async (\n    didUri: string,\n    resolutionMetaData: any = { accept: 'application/did+ld+json' }\n  ) => {\n    const fingerprint = didUri\n      .split('#')[0]\n      .split('did:key:')\n      .pop();\n    const publicKey = await Bls12381KeyPairs.fromFingerprint({ fingerprint });\n    const didResolutionResponse = {\n      '@context': 'https://w3id.org/did-resolution/v1',\n      didDocument: await keyToDidDoc(publicKey, resolutionMetaData.accept),\n      didDocumentMetadata: {\n        'content-type': resolutionMetaData.accept,\n      },\n      didResolutionMetadata: {},\n    };\n    return didResolutionResponse;\n  };\n\n  return resolve;\n};\n\nexport const resolve = getResolve();\nexport const get = getGet(resolve);\n"],"names":["BlsCurveName","generateKeyPairs","generateBls12381G1KeyPair","g1","generateBls12381G2KeyPair","g2","bls12381G1KeyPair","id","type","controller","publicKeyBase58","bs58","encode","publicKey","privateKeyBase58","secretKey","bls12381G2KeyPair","curveMap","Bls12381G1Key2020","G1","Bls12381G2Key2020","G2","toJsonWebKeyPair","keypair","jsonWebKeyPair","publicKeyJwk","kty","crv","x","base64url","decode","privateKeyJwk","d","fingerprintToJsonWebKeyPair","fingerprint","Error","buffer","substring","slice","curveToMulticodecMap","publicKeyJwkToDidKey","toBuffer","Uint8Array","length","set","Bls12381G1KeyPair","options","publicKeyBuffer","privateKeyBuffer","this","split","pop","generate","fromFingerprint","from","opts","toKeyPair","exportPrivateKey","kp","verifier","mattr","signer","Bls12381G2KeyPair","Bls12381KeyPairs","g1KeyPair","g2KeyPair","indexOf","g1AndG2","Buffer","concat","exportPrivate","getVerificationMethod","instance","contentType","getGet","resolve","did","url","TypeError","result","didDocument","getResolve","didUri","resolutionMetaData","accept","didKeyPairInstance","verificationRelationships","verificationMethod","push","authentication","assertionMethod","capabilityInvocation","capabilityDelegation","vm","keyToDidDoc","didDocumentMetadata","didResolutionMetadata"],"mappings":"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"}