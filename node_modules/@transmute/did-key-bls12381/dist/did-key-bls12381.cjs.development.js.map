{"version":3,"file":"did-key-bls12381.cjs.development.js","sources":["../src/functions/generateKeyPairs.ts","../src/constants/index.ts","../src/types/BlsCurveName.ts","../src/functions/toJsonWebKeyPair.ts","../src/functions/fingerprintToJsonWebKeyPair.ts","../src/functions/publicKeyJwkToDidKey.ts","../src/Bls12381G1KeyPair.ts","../src/Bls12381G2KeyPair.ts","../src/Bls12381KeyPairs.ts","../src/functions/keyToDidDoc.ts","../src/driver.ts"],"sourcesContent":["import bs58 from 'bs58';\nimport {\n  generateBls12381G1KeyPair,\n  generateBls12381G2KeyPair,\n} from '@mattrglobal/bbs-signatures';\n\nexport const generateKeyPairs = async () => {\n  const g1 = await generateBls12381G1KeyPair();\n  const g2 = await generateBls12381G2KeyPair();\n\n  const bls12381G1KeyPair = {\n    id: '',\n    type: 'Bls12381G1Key2020',\n    controller: '',\n    publicKeyBase58: bs58.encode(g1.publicKey),\n    privateKeyBase58: bs58.encode(g1.secretKey),\n  };\n\n  const bls12381G2KeyPair = {\n    id: '',\n    type: 'Bls12381G2Key2020',\n    controller: '',\n    publicKeyBase58: bs58.encode(g2.publicKey),\n    privateKeyBase58: bs58.encode(g2.secretKey),\n  };\n  return {\n    bls12381G1KeyPair,\n    bls12381G2KeyPair,\n  };\n};\n","// Pulled from https://github.com/mattrglobal/bls12381-key-pair\n// License is Apache-2.0\n\n/**\n * z represents the multibase encoding scheme of base58 encoding\n * @see https://github.com/multiformats/multibase/blob/master/multibase.csv#L18\n * @ignore\n */\nconst MULTIBASE_ENCODED_BASE58_IDENTIFIER = 'z';\n\n/**\n * 0x01 indicates the end of the leading bytes according to variable integer spec\n * @see https://github.com/multiformats/multicodec\n * @ignore\n */\nconst VARIABLE_INTEGER_TRAILING_BYTE = 0x01;\n\n/**\n * 0xea indicates a BLS 12-381 G1 public key\n *\n */\nconst BLS12381G1_MULTICODEC_IDENTIFIER = 0xea;\n\n/**\n * 0xeb indicates a BLS 12-381 G2 public key\n *\n */\nconst BLS12381G2_MULTICODEC_IDENTIFIER = 0xeb;\n\n/**\n * 0xee indicates a BLS 12-381 G1 concat with BLS 12-381 G2\n *\n */\nconst BLS12381G1ANDG2_MULTICODEC_IDENTIFIER = 0xee;\n\nexport {\n  MULTIBASE_ENCODED_BASE58_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n  BLS12381G1_MULTICODEC_IDENTIFIER,\n  BLS12381G2_MULTICODEC_IDENTIFIER,\n  BLS12381G1ANDG2_MULTICODEC_IDENTIFIER,\n};\n","export enum BlsCurveName {\n  G1 = 'BLS12381_G1',\n  G2 = 'BLS12381_G2',\n}\n","import { BlsCurveName } from '../types';\nimport base64url from 'base64url';\nimport bs58 from 'bs58';\nconst curveMap: any = {\n  Bls12381G1Key2020: BlsCurveName.G1,\n  Bls12381G2Key2020: BlsCurveName.G2,\n};\n\nexport const toJsonWebKeyPair = (keypair: any) => {\n  const jsonWebKeyPair: any = {\n    id: keypair.id,\n    controller: keypair.controller,\n    type: 'JsonWebKey2020',\n    publicKeyJwk: {\n      kty: 'EC',\n      crv: curveMap[keypair.type],\n      x: base64url.encode(bs58.decode(keypair.publicKeyBase58)),\n    },\n  };\n\n  if (keypair.privateKeyBase58) {\n    jsonWebKeyPair.privateKeyJwk = {\n      kty: 'EC',\n      crv: curveMap[keypair.type],\n      x: base64url.encode(bs58.decode(keypair.publicKeyBase58)),\n      d: base64url.encode(bs58.decode(keypair.privateKeyBase58)),\n    };\n  }\n\n  return jsonWebKeyPair;\n};\n","import bs58 from 'bs58';\n\nimport {\n  BLS12381G1ANDG2_MULTICODEC_IDENTIFIER,\n  BLS12381G1_MULTICODEC_IDENTIFIER,\n  BLS12381G2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from '../constants';\n\nimport { toJsonWebKeyPair } from './toJsonWebKeyPair';\nexport const fingerprintToJsonWebKeyPair = (fingerprint: string) => {\n  if (fingerprint[0] !== 'z') {\n    throw new Error('base58 encoded fingerprint must start with \"z\"');\n  }\n\n  const buffer = bs58.decode(fingerprint.substring(1));\n\n  if (\n    buffer[0] === BLS12381G1_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let kp = toJsonWebKeyPair({\n      type: 'Bls12381G1Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2)),\n    });\n    return {\n      bls12381G1KeyPair: {\n        ...kp,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  if (\n    buffer[0] === BLS12381G2_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let kp = toJsonWebKeyPair({\n      type: 'Bls12381G2Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2)),\n    });\n    return {\n      bls12381G2KeyPair: {\n        ...kp,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  if (\n    buffer[0] === BLS12381G1ANDG2_MULTICODEC_IDENTIFIER &&\n    buffer[1] === VARIABLE_INTEGER_TRAILING_BYTE\n  ) {\n    let g1 = toJsonWebKeyPair({\n      type: 'Bls12381G1Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(2, 50)),\n    });\n    let g2 = toJsonWebKeyPair({\n      type: 'Bls12381G2Key2020',\n      publicKeyBase58: bs58.encode(buffer.slice(50)),\n    });\n    return {\n      bls12381G1KeyPair: {\n        ...g1,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n      bls12381G2KeyPair: {\n        ...g2,\n        id: '#' + fingerprint,\n        controller: `did:key:${fingerprint}`,\n      },\n    };\n  }\n\n  throw new Error('unsupported fingerprint is not g1, g2 or g1 and g2.');\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport {\n  MULTIBASE_ENCODED_BASE58_IDENTIFIER,\n  BLS12381G1_MULTICODEC_IDENTIFIER,\n  BLS12381G2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from '../constants';\nimport { BlsCurveName } from '../types';\n\nconst curveToMulticodecMap: any = {\n  [BlsCurveName.G1]: BLS12381G1_MULTICODEC_IDENTIFIER,\n  [BlsCurveName.G2]: BLS12381G2_MULTICODEC_IDENTIFIER,\n};\n\nexport const publicKeyJwkToDidKey = (publicKeyJwk: any) => {\n  const publicKey = base64url.toBuffer(publicKeyJwk.x);\n\n  const buffer = new Uint8Array(2 + publicKey.length);\n  buffer[0] = curveToMulticodecMap[publicKeyJwk.crv];\n  buffer[1] = VARIABLE_INTEGER_TRAILING_BYTE;\n\n  buffer.set(publicKey, 2);\n\n  return `did:key:${MULTIBASE_ENCODED_BASE58_IDENTIFIER}${bs58.encode(buffer)}`;\n};\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport * as mattr from '@mattrglobal/bls12381-key-pair';\nimport { generateKeyPairs } from './functions/generateKeyPairs';\nimport { toJsonWebKeyPair } from './functions/toJsonWebKeyPair';\nimport { publicKeyJwkToDidKey } from './functions/publicKeyJwkToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\n\nexport class Bls12381G1KeyPair {\n  public id: string;\n  public type: string = 'Bls12381G1Key2020';\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static async generate() {\n    const { bls12381G1KeyPair } = await generateKeyPairs();\n    const { publicKeyJwk } = toJsonWebKeyPair(bls12381G1KeyPair);\n    bls12381G1KeyPair.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    bls12381G1KeyPair.id =\n      '#' + bls12381G1KeyPair.controller.split('did:key:').pop();\n    return new Bls12381G1KeyPair({\n      id: bls12381G1KeyPair.id,\n      controller: bls12381G1KeyPair.controller,\n      publicKeyBuffer: bs58.decode(bls12381G1KeyPair.publicKeyBase58),\n      privateKeyBuffer: bs58.decode(bls12381G1KeyPair.privateKeyBase58),\n    });\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    const { bls12381G1KeyPair } = fingerprintToJsonWebKeyPair(fingerprint);\n    return new Bls12381G1KeyPair({\n      id: bls12381G1KeyPair.id,\n      controller: bls12381G1KeyPair.controller,\n      publicKeyBuffer: base64url.toBuffer(bls12381G1KeyPair.publicKeyJwk.x),\n    });\n  }\n\n  static async from(options: any) {\n    if (options.type === 'JsonWebKey2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: base64url.toBuffer(options.publicKeyJwk.x),\n      };\n      if (options.privateKeyJwk) {\n        opts.privateKeyBuffer = base64url.toBuffer(options.privateKeyJwk.d);\n      }\n      return new Bls12381G1KeyPair(opts);\n    }\n\n    if (options.type === 'Bls12381G1Key2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: bs58.decode(options.publicKeyBase58),\n      };\n      if (options.privateKeyBase58) {\n        opts.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n      }\n      return new Bls12381G1KeyPair(opts);\n    }\n\n    throw new Error('unsuported key type');\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.publicKeyBuffer = options.publicKeyBuffer;\n    this.privateKeyBuffer = options.privateKeyBuffer;\n    if (!this.controller) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    }\n    if (!this.id) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.id =\n        '#' +\n        publicKeyJwkToDidKey(publicKeyJwk)\n          .split('did:key:')\n          .pop();\n    }\n  }\n\n  fingerprint() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n    return publicKeyJwkToDidKey(publicKeyJwk)\n      .split('did:key:')\n      .pop();\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    const result = toJsonWebKeyPair(this.toKeyPair(exportPrivateKey));\n    return result;\n  }\n\n  verifier() {\n    const key = new mattr.Bls12381G1KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    });\n    return key.verifier();\n  }\n\n  signer() {\n    const key = new mattr.Bls12381G1KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n    });\n    return key.signer();\n  }\n}\n","import bs58 from 'bs58';\nimport base64url from 'base64url';\nimport * as mattr from '@mattrglobal/bls12381-key-pair';\nimport { generateKeyPairs } from './functions/generateKeyPairs';\nimport { toJsonWebKeyPair } from './functions/toJsonWebKeyPair';\nimport { publicKeyJwkToDidKey } from './functions/publicKeyJwkToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\n\nexport class Bls12381G2KeyPair {\n  public id: string;\n  public type: string = 'Bls12381G2Key2020';\n  public controller: string;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer?: Buffer;\n\n  static async generate() {\n    const { bls12381G2KeyPair } = await generateKeyPairs();\n    const { publicKeyJwk } = toJsonWebKeyPair(bls12381G2KeyPair);\n    bls12381G2KeyPair.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    bls12381G2KeyPair.id =\n      '#' + bls12381G2KeyPair.controller.split('did:key:').pop();\n    return new Bls12381G2KeyPair({\n      id: bls12381G2KeyPair.id,\n      controller: bls12381G2KeyPair.controller,\n      publicKeyBuffer: bs58.decode(bls12381G2KeyPair.publicKeyBase58),\n      privateKeyBuffer: bs58.decode(bls12381G2KeyPair.privateKeyBase58),\n    });\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    const { bls12381G2KeyPair } = fingerprintToJsonWebKeyPair(fingerprint);\n    return new Bls12381G2KeyPair({\n      id: bls12381G2KeyPair.id,\n      controller: bls12381G2KeyPair.controller,\n      publicKeyBuffer: base64url.toBuffer(bls12381G2KeyPair.publicKeyJwk.x),\n    });\n  }\n\n  static async from(options: any) {\n    if (options.type === 'JsonWebKey2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: base64url.toBuffer(options.publicKeyJwk.x),\n      };\n      if (options.privateKeyJwk) {\n        opts.privateKeyBuffer = base64url.toBuffer(options.privateKeyJwk.d);\n      }\n      return new Bls12381G2KeyPair(opts);\n    }\n\n    if (options.type === 'Bls12381G2Key2020') {\n      let opts: any = {\n        id: options.id,\n        controller: options.controller,\n        publicKeyBuffer: bs58.decode(options.publicKeyBase58),\n      };\n      if (options.privateKeyBase58) {\n        opts.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n      }\n      return new Bls12381G2KeyPair(opts);\n    }\n\n    throw new Error('unsuported key type');\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.publicKeyBuffer = options.publicKeyBuffer;\n    this.privateKeyBuffer = options.privateKeyBuffer;\n\n    if (!this.controller) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.controller = publicKeyJwkToDidKey(publicKeyJwk);\n    }\n    if (!this.id) {\n      const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n      this.id =\n        '#' +\n        publicKeyJwkToDidKey(publicKeyJwk)\n          .split('did:key:')\n          .pop();\n    }\n  }\n\n  fingerprint() {\n    const { publicKeyJwk } = this.toJsonWebKeyPair(false);\n    return publicKeyJwkToDidKey(publicKeyJwk)\n      .split('did:key:')\n      .pop();\n  }\n\n  toKeyPair(exportPrivateKey: boolean = false) {\n    const kp: any = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller,\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    };\n\n    if (exportPrivateKey) {\n      kp.privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    }\n    return kp;\n  }\n\n  toJsonWebKeyPair(exportPrivateKey = false) {\n    return toJsonWebKeyPair(this.toKeyPair(exportPrivateKey));\n  }\n\n  verifier() {\n    const key = new mattr.Bls12381G2KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n    });\n    return key.verifier();\n  }\n\n  signer() {\n    const key = new mattr.Bls12381G2KeyPair({\n      publicKeyBase58: bs58.encode(this.publicKeyBuffer),\n      privateKeyBase58: bs58.encode(this.privateKeyBuffer),\n    });\n    return key.signer();\n  }\n}\n","import bs58 from 'bs58';\n// import base64url from 'base64url'\n// import * as mattr from '@mattrglobal/bls12381-key-pair'\nimport { generateKeyPairs } from './functions/generateKeyPairs';\n// import { keypairsToDidKey } from './functions/keypairsToDidKey';\nimport { fingerprintToJsonWebKeyPair } from './functions/fingerprintToJsonWebKeyPair';\nimport { Bls12381G1KeyPair } from './Bls12381G1KeyPair';\nimport { Bls12381G2KeyPair } from './Bls12381G2KeyPair';\n\nimport {\n  MULTIBASE_ENCODED_BASE58_IDENTIFIER,\n  BLS12381G1ANDG2_MULTICODEC_IDENTIFIER,\n  VARIABLE_INTEGER_TRAILING_BYTE,\n} from './constants';\n\nexport class Bls12381KeyPairs {\n  public id: string;\n  public type: string = 'Bls12381KeyPairs2020';\n  public controller: string;\n  public g1KeyPair: Bls12381G1KeyPair;\n  public g2KeyPair: Bls12381G2KeyPair;\n\n  static async generate() {\n    const { bls12381G1KeyPair, bls12381G2KeyPair } = await generateKeyPairs();\n    const options = {\n      id: '',\n      controller: '',\n      g1KeyPair: new Bls12381G1KeyPair({\n        id: bls12381G1KeyPair.id,\n        publicKeyBuffer: bs58.decode(bls12381G1KeyPair.publicKeyBase58),\n        privateKeyBuffer: bs58.decode(bls12381G1KeyPair.privateKeyBase58),\n      }),\n      g2KeyPair: new Bls12381G2KeyPair({\n        id: bls12381G2KeyPair.id,\n        publicKeyBuffer: bs58.decode(bls12381G2KeyPair.publicKeyBase58),\n        privateKeyBuffer: bs58.decode(bls12381G2KeyPair.privateKeyBase58),\n      }),\n    };\n    return new Bls12381KeyPairs(options);\n  }\n\n  static async fromFingerprint({ fingerprint }: any) {\n    if (fingerprint.indexOf('z5Tc') === 0) {\n      const {\n        bls12381G1KeyPair,\n        bls12381G2KeyPair,\n      } = fingerprintToJsonWebKeyPair(fingerprint);\n      delete bls12381G1KeyPair.id;\n      delete bls12381G2KeyPair.id;\n      const controller = 'did:key:' + fingerprint;\n      bls12381G1KeyPair.controller = controller;\n      bls12381G2KeyPair.controller = controller;\n      return new Bls12381KeyPairs({\n        id: '#' + fingerprint,\n        controller,\n        g1KeyPair: await Bls12381G1KeyPair.from(bls12381G1KeyPair),\n        g2KeyPair: await Bls12381G2KeyPair.from(bls12381G2KeyPair),\n      });\n    }\n    if (fingerprint.indexOf('z3t') === 0) {\n      return Bls12381G1KeyPair.fromFingerprint({ fingerprint });\n    }\n    if (fingerprint.indexOf('zUC') === 0) {\n      return Bls12381G2KeyPair.fromFingerprint({ fingerprint });\n    }\n    throw new Error(\n      'Bls12381KeyPairs only supports g1, g2 and g1 and g2 mulicodec fingerprints.'\n    );\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.g1KeyPair = options.g1KeyPair;\n    this.g2KeyPair = options.g2KeyPair;\n    if (!this.id) {\n      this.id = '#' + this.fingerprint();\n    }\n\n    if (!this.controller) {\n      this.controller = 'did:key:' + this.fingerprint();\n    }\n\n    this.g1KeyPair.controller = this.controller;\n    this.g2KeyPair.controller = this.controller;\n  }\n\n  fingerprint() {\n    const g1Buffer = this.g1KeyPair.publicKeyBuffer;\n    const g2Buffer = this.g2KeyPair.publicKeyBuffer;\n    const g1AndG2 = Buffer.concat([g1Buffer, g2Buffer]);\n    const buffer = new Uint8Array(2 + g1AndG2.length);\n    buffer[0] = BLS12381G1ANDG2_MULTICODEC_IDENTIFIER;\n    buffer[1] = VARIABLE_INTEGER_TRAILING_BYTE;\n\n    buffer.set(g1AndG2, 2);\n    return `${MULTIBASE_ENCODED_BASE58_IDENTIFIER}${bs58.encode(buffer)}`;\n  }\n\n  export(exportPrivate = false) {\n    return {\n      fingerprint: this.fingerprint(),\n      g1: this.g1KeyPair.toJsonWebKeyPair(exportPrivate),\n      g2: this.g2KeyPair.toJsonWebKeyPair(exportPrivate),\n    };\n  }\n}\n","import { Bls12381KeyPairs } from '../Bls12381KeyPairs';\n\nexport const getVerificationMethod = (\n  instance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  switch (contentType) {\n    case 'application/did+json': {\n      return instance.toJsonWebKeyPair();\n    }\n    case 'application/did+cbor': {\n      return instance.toJsonWebKeyPair();\n    }\n    case 'application/did+ld+json': {\n      return instance.toKeyPair();\n    }\n  }\n  throw new Error(\n    'This implementation of did:key for bls12381 does not support: ' +\n      contentType\n  );\n};\n\nexport const keyToDidDoc = async (\n  didKeyPairInstance: any,\n  contentType: string = 'application/did+ld+json'\n) => {\n  let verificationRelationships: any = {\n    verificationMethod: [],\n  };\n  const did = `did:key:${didKeyPairInstance.fingerprint()}`;\n  if (didKeyPairInstance.type === 'Bls12381KeyPairs2020') {\n    const g1 = getVerificationMethod(\n      (didKeyPairInstance as Bls12381KeyPairs).g1KeyPair,\n      contentType\n    );\n    const g2 = getVerificationMethod(\n      (didKeyPairInstance as Bls12381KeyPairs).g2KeyPair,\n      contentType\n    );\n    verificationRelationships.verificationMethod.push(g1);\n    verificationRelationships.verificationMethod.push(g2);\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [g1.id, g2.id],\n      assertionMethod: [g1.id, g2.id],\n      capabilityInvocation: [g1.id, g2.id],\n      capabilityDelegation: [g1.id, g2.id],\n    };\n  } else {\n    const vm = getVerificationMethod(didKeyPairInstance, contentType);\n    verificationRelationships.verificationMethod.push(vm);\n    verificationRelationships = {\n      ...verificationRelationships,\n      authentication: [vm.id],\n      assertionMethod: [vm.id],\n      capabilityInvocation: [vm.id],\n      capabilityDelegation: [vm.id],\n    };\n  }\n\n  const didDocument = {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      'https://ns.did.ai/transmute/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    ...verificationRelationships,\n  };\n\n  return didDocument;\n};\n","import { Bls12381KeyPairs } from './Bls12381KeyPairs';\nimport { keyToDidDoc } from './functions/keyToDidDoc';\n\nexport const getGet = (resolve: any) => {\n  const get = async ({ did, url }: any = {}) => {\n    did = did || url;\n    if (!did) {\n      throw new TypeError('\"did\" must be a string.');\n    }\n    const result = await resolve(did);\n    return result.didDocument;\n  };\n  return get;\n};\n\nexport const getResolve = () => {\n  const resolve = async (\n    didUri: string,\n    resolutionMetaData: any = { accept: 'application/did+ld+json' }\n  ) => {\n    const fingerprint = didUri\n      .split('#')[0]\n      .split('did:key:')\n      .pop();\n    const publicKey = await Bls12381KeyPairs.fromFingerprint({ fingerprint });\n    const didResolutionResponse = {\n      '@context': 'https://w3id.org/did-resolution/v1',\n      didDocument: await keyToDidDoc(publicKey, resolutionMetaData.accept),\n      didDocumentMetadata: {\n        'content-type': resolutionMetaData.accept,\n      },\n      didResolutionMetadata: {},\n    };\n    return didResolutionResponse;\n  };\n\n  return resolve;\n};\n\nexport const resolve = getResolve();\nexport const get = getGet(resolve);\n"],"names":["generateKeyPairs","generateBls12381G1KeyPair","g1","generateBls12381G2KeyPair","g2","bls12381G1KeyPair","id","type","controller","publicKeyBase58","bs58","encode","publicKey","privateKeyBase58","secretKey","bls12381G2KeyPair","MULTIBASE_ENCODED_BASE58_IDENTIFIER","VARIABLE_INTEGER_TRAILING_BYTE","BLS12381G1_MULTICODEC_IDENTIFIER","BLS12381G2_MULTICODEC_IDENTIFIER","BLS12381G1ANDG2_MULTICODEC_IDENTIFIER","BlsCurveName","curveMap","Bls12381G1Key2020","G1","Bls12381G2Key2020","G2","toJsonWebKeyPair","keypair","jsonWebKeyPair","publicKeyJwk","kty","crv","x","base64url","decode","privateKeyJwk","d","fingerprintToJsonWebKeyPair","fingerprint","Error","buffer","substring","kp","slice","curveToMulticodecMap","publicKeyJwkToDidKey","toBuffer","Uint8Array","length","set","Bls12381G1KeyPair","options","publicKeyBuffer","privateKeyBuffer","split","pop","generate","fromFingerprint","from","opts","toKeyPair","exportPrivateKey","result","verifier","key","mattr","signer","Bls12381G2KeyPair","Bls12381KeyPairs","g1KeyPair","g2KeyPair","indexOf","g1Buffer","g2Buffer","g1AndG2","Buffer","concat","exportPrivate","getVerificationMethod","instance","contentType","keyToDidDoc","didKeyPairInstance","verificationRelationships","verificationMethod","did","push","authentication","assertionMethod","capabilityInvocation","capabilityDelegation","vm","didDocument","getGet","resolve","get","url","TypeError","getResolve","didUri","resolutionMetaData","accept","didResolutionResponse","didDocumentMetadata","didResolutionMetadata"],"mappings":"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"}