{"version":3,"file":"did-key-p384.cjs.development.js","sources":["../src/keyUtils.ts","../src/crypto-helper/crypto-helper-node.ts","../src/ES384.ts","../src/types.ts","../src/P384KeyPair.ts","../src/driver.ts"],"sourcesContent":["import crypto from 'crypto';\nimport canonicalize from 'canonicalize';\nimport base64url from 'base64url';\nimport * as bs58 from 'bs58';\nimport { P384PublicKeyJwk, P384PrivateKeyJwk } from './types';\n\nexport const getKid = (jwk: P384PublicKeyJwk | P384PrivateKeyJwk) => {\n  const digest = crypto\n    .createHash('sha256')\n    .update(\n      canonicalize({\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n        kty: jwk.kty,\n      })\n    )\n    .digest();\n  return base64url.encode(Buffer.from(digest));\n};\n\nexport const publicKeyJwkToPublicKeyBase58 = (\n  publicKeyJwk: P384PublicKeyJwk\n) => {\n  const publicKeyBuffer = Buffer.concat([\n    base64url.toBuffer(publicKeyJwk.x),\n    base64url.toBuffer(publicKeyJwk.y),\n  ]);\n  return bs58.encode(publicKeyBuffer);\n};\n\nexport const publicKeyBase58toPublicKeyJwk = (publicKeyBase58: string) => {\n  const buffer = bs58.decode(publicKeyBase58);\n  const jwk: P384PublicKeyJwk = {\n    crv: 'P-384',\n    x: base64url.encode(buffer.slice(0, 48)),\n    y: base64url.encode(buffer.slice(48, 96)),\n    kty: 'EC',\n  };\n\n  return { ...jwk, kid: getKid(jwk) };\n};\n\nexport const privateKeyJwkToPrivateKeyBase58 = (\n  privateKeyJwk: P384PrivateKeyJwk\n) => {\n  return bs58.encode(base64url.toBuffer(privateKeyJwk.d));\n};\n\nexport const privateKeyBase58toPrivateKeyJwk = (\n  privateKeyBase58: string,\n  publicKeyBase58: string\n) => {\n  const publicKeyJwk = publicKeyBase58toPublicKeyJwk(publicKeyBase58);\n  return {\n    ...publicKeyJwk,\n    d: base64url.encode(bs58.decode(privateKeyBase58)),\n  };\n};\n","import { Crypto } from 'node-webcrypto-ossl';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined'\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto as Crypto;\n}\n\nconst generate = async () => {\n  let key = await crypto.subtle.generateKey(\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['sign', 'verify']\n  );\n  const publicKeyJwk = await crypto.subtle.exportKey('jwk', key.publicKey);\n  const privateKeyJwk = await crypto.subtle.exportKey('jwk', key.privateKey);\n  return {\n    publicKeyJwk,\n    privateKeyJwk,\n  };\n};\n\nconst sign = async (message: Uint8Array, privateKeyJwk: any) => {\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['sign']\n  );\n  const signature = await crypto.subtle.sign(\n    {\n      name: 'ECDSA',\n      hash: { name: 'SHA-384' },\n    },\n    privateKey,\n    message\n  );\n  return new Uint8Array(signature);\n};\n\nconst verify = async (\n  message: Uint8Array,\n  signature: Uint8Array,\n  publicKeyJwk: any\n) => {\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['verify']\n  );\n\n  return crypto.subtle.verify(\n    {\n      name: 'ECDSA',\n      hash: { name: 'SHA-384' },\n    },\n    publicKey,\n    signature,\n    message\n  );\n};\n\nconst deriveSecret = async (\n  privateKeyJwk: any,\n  publicKeyJwk: any\n): Promise<Uint8Array> => {\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['deriveBits']\n  );\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['deriveBits']\n  );\n  const result = await crypto.subtle.deriveBits(\n    {\n      name: 'ECDH',\n      public: publicKey,\n    },\n    privateKey,\n    256\n  );\n  return new Uint8Array(result);\n};\n\nexport { generate, sign, verify, deriveSecret };\n","import * as help from './crypto-helper';\nimport base64url from 'base64url';\n\nconst sign = async (\n  privateKeyJwk: any,\n  payload: any,\n  header: any = { alg: 'ES384' }\n) => {\n  const toBeSigned = `${base64url.encode(\n    JSON.stringify(header)\n  )}.${base64url.encode(JSON.stringify(payload))}`;\n  const signature = await help.sign(\n    new Uint8Array(Buffer.from(toBeSigned)),\n    privateKeyJwk\n  );\n  return `${toBeSigned}.${base64url.encode(Buffer.from(signature))}`;\n};\n\nconst verify = async (publicKeyJwk: any, jws: string) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = [encodedHeader, encodedPayload].join('.');\n\n  let verified = false;\n\n  verified = await help.verify(\n    new Uint8Array(Buffer.from(toBeSigned)),\n    new Uint8Array(base64url.toBuffer(encodedSignature)),\n    publicKeyJwk\n  );\n\n  return verified;\n};\n\nconst signDetached = async (\n  privateKeyJwk: any,\n  payload: Buffer,\n  header: any = { alg: 'ES384' }\n) => {\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const signature = await help.sign(\n    new Uint8Array(toBeSignedBuffer),\n    privateKeyJwk\n  );\n  return `${encodedHeader}..${base64url.encode(Buffer.from(signature))}`;\n};\n\nconst verifyDetached = async (\n  publicKeyJwk: any,\n  jws: string,\n  payload: Buffer\n) => {\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  let verified = false;\n\n  verified = await help.verify(\n    new Uint8Array(Buffer.from(toBeSignedBuffer)),\n    new Uint8Array(base64url.toBuffer(encodedSignature)),\n    publicKeyJwk\n  );\n\n  return verified;\n};\n\nexport { sign, verify, signDetached, verifyDetached };\n","export const verificationMethodType = 'JsonWebKey2020';\n\nexport type P384PublicKeyJwk = {\n  kty: 'EC';\n  crv: 'P-384';\n  x: string;\n  y: string;\n  kid?: string;\n};\n\nexport type P384PrivateKeyJwk = {\n  kty: 'EC';\n  crv: 'P-384';\n  x: string;\n  y: string;\n  d: string;\n  kid?: string;\n};\n\nexport type JsonWebKey2020PublicKeyJwk = P384PublicKeyJwk;\nexport type JsonWebKey2020PrivateKeyJwk = P384PrivateKeyJwk;\n\nexport type JsonWebKey2020 = {\n  id: string;\n  type: 'JsonWebKey2020';\n  controller: string;\n  publicKeyJwk: JsonWebKey2020PublicKeyJwk;\n  privateKeyJwk?: JsonWebKey2020PrivateKeyJwk;\n};\n","import base64url from 'base64url';\nimport * as bs58 from 'bs58';\nimport * as help from './crypto-helper';\n\nimport * as keyUtils from './keyUtils';\n\nimport { JsonWebKey2020, verificationMethodType } from './types';\n\nexport class P384KeyPair {\n  public id: string;\n  public controller: string;\n  public type = verificationMethodType;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer: Buffer;\n\n  static from = async (options: any) => {\n    return new P384KeyPair({ ...options });\n  };\n\n  static generate = async () => {\n    const key = await help.generate();\n    return P384KeyPair.from(key);\n  };\n\n  static fingerprintFromPublicKey({ publicKeyBase58 }: any) {\n    const pubkeyBytes = bs58.decode(publicKeyBase58);\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    // See https://github.com/multiformats/multicodec/blob/master/table.csv\n    // 0xef is P-384 public key\n    buffer[0] = 0xef; //\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L77\n    if (buffer[0] === 0xef && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${P384KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      })}`;\n      const keyId = `#${P384KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      })}`;\n      return new P384KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.type = options.type || 'JsonWebKey2020';\n    this.publicKeyBuffer = options.publicKeyBuffer;\n    this.privateKeyBuffer = options.privateKeyBuffer;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.concat([\n        base64url.toBuffer(options.publicKeyJwk.x),\n        base64url.toBuffer(options.publicKeyJwk.y),\n      ]);\n    }\n\n    if (options.privateKeyJwk) {\n      this.publicKeyBuffer = Buffer.concat([\n        base64url.toBuffer(options.privateKeyJwk.x),\n        base64url.toBuffer(options.privateKeyJwk.y),\n      ]);\n      this.privateKeyBuffer = Buffer.concat([\n        base64url.toBuffer(options.privateKeyJwk.d),\n      ]);\n    }\n\n    const publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    const fingerprint = P384KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    });\n\n    if (!this.id) {\n      this.id = '#' + fingerprint;\n    }\n\n    if (!this.controller) {\n      this.controller = 'did:key:' + fingerprint;\n    }\n  }\n\n  addEncodedPublicKey(publicKeyNode: any) {\n    publicKeyNode.publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    return publicKeyNode;\n  }\n\n  publicNode({ controller = this.controller } = {}) {\n    const publicNode: any = {\n      id: this.id,\n      type: this.type,\n    };\n    if (controller) {\n      publicNode.controller = controller;\n    }\n    this.addEncodedPublicKey(publicNode); // Subclass-specific\n    return publicNode;\n  }\n\n  toJwk(exportPrivate: boolean = false) {\n    if (exportPrivate) {\n      return keyUtils.privateKeyBase58toPrivateKeyJwk(\n        bs58.encode(this.privateKeyBuffer),\n        bs58.encode(this.publicKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyBase58toPublicKeyJwk(\n      bs58.encode(this.publicKeyBuffer)\n    );\n  }\n\n  toVerificationMethod(): JsonWebKey2020 {\n    const publicKeyJwk = this.toJwk();\n    delete publicKeyJwk.kid;\n    return {\n      id: this.id,\n      type: verificationMethodType,\n      controller: this.controller,\n      publicKeyJwk,\n    };\n  }\n\n  get publicKey() {\n    return bs58.encode(this.publicKeyBuffer);\n  }\n\n  get privateKey() {\n    return bs58.encode(this.privateKeyBuffer);\n  }\n\n  fingerprint() {\n    const publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    return P384KeyPair.fingerprintFromPublicKey({ publicKeyBase58 });\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      return {\n        async sign() {\n          throw new Error('No private key to sign with.');\n        },\n      };\n    }\n    let privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    let publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    let privateKeyJwk = keyUtils.privateKeyBase58toPrivateKeyJwk(\n      privateKeyBase58,\n      publicKeyBase58\n    );\n    return {\n      async sign({ data }: any) {\n        const signature = help.sign(data, privateKeyJwk);\n        return signature;\n      },\n    };\n  }\n\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      return {\n        async verify() {\n          throw new Error('No public key to verify with.');\n        },\n      };\n    }\n    let publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    let publicKeyJwk = keyUtils.publicKeyBase58toPublicKeyJwk(publicKeyBase58);\n    return {\n      async verify({ data, signature }: any) {\n        return help.verify(data, signature, publicKeyJwk);\n      },\n    };\n  }\n\n  async deriveSecret({ publicKey }: any) {\n    let privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    let publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    let privateKeyJwk = keyUtils.privateKeyBase58toPrivateKeyJwk(\n      privateKeyBase58,\n      publicKeyBase58\n    );\n    const secret = await help.deriveSecret(\n      privateKeyJwk,\n      publicKey.publicKeyJwk\n    );\n    return secret;\n  }\n}\n","import { P384KeyPair } from './P384KeyPair';\n\nexport const computeKeyId = async ({ key }: any) => {\n  return `did:key:${key.fingerprint()}#${key.fingerprint()}`;\n};\n\nexport const keyToDidDoc = (secp256k1Key: P384KeyPair) => {\n  const did = `did:key:${secp256k1Key.fingerprint()}`;\n  const publicKeyJwk = secp256k1Key.toJwk();\n  const keyId = `#${publicKeyJwk.kid}`;\n  delete publicKeyJwk.kid;\n  return {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    publicKey: [\n      {\n        id: keyId,\n        type: secp256k1Key.type,\n        controller: did,\n        publicKeyJwk,\n      },\n    ],\n    authentication: [keyId],\n    assertionMethod: [keyId],\n    capabilityDelegation: [keyId],\n    capabilityInvocation: [keyId],\n    keyAgreement: [keyId],\n  };\n};\n\nexport const get = async ({ did, url }: any = {}) => {\n  did = did || url;\n  if (!did) {\n    throw new TypeError('\"did\" must be a string.');\n  }\n  const fingerprint = did\n    .split('#')[0]\n    .split('did:key:')\n    .pop();\n  const publicKey = await P384KeyPair.fromFingerprint({ fingerprint });\n  const didDoc = keyToDidDoc(publicKey);\n  return didDoc;\n};\n"],"names":["getKid","jwk","digest","crypto","createHash","update","canonicalize","crv","x","y","kty","base64url","encode","Buffer","from","publicKeyJwkToPublicKeyBase58","publicKeyJwk","publicKeyBuffer","concat","toBuffer","bs58","publicKeyBase58toPublicKeyJwk","publicKeyBase58","buffer","slice","kid","privateKeyJwkToPrivateKeyBase58","privateKeyJwk","d","privateKeyBase58toPrivateKeyJwk","privateKeyBase58","isNodejs","process","versions","node","Crypto","window","generate","subtle","generateKey","name","namedCurve","key","exportKey","publicKey","privateKey","sign","message","importKey","hash","signature","Uint8Array","verify","deriveSecret","deriveBits","result","payload","header","alg","toBeSigned","JSON","stringify","help","jws","split","encodedHeader","encodedPayload","encodedSignature","join","verified","signDetached","toBeSignedBuffer","byteOffset","length","verifyDetached","verificationMethodType","P384KeyPair","options","id","controller","type","privateKeyBuffer","fingerprint","fingerprintFromPublicKey","pubkeyBytes","set","fromFingerprint","substr","did","keyId","Error","addEncodedPublicKey","publicKeyNode","publicNode","toJwk","exportPrivate","keyUtils","toVerificationMethod","signer","data","verifier","computeKeyId","keyToDidDoc","secp256k1Key","authentication","assertionMethod","capabilityDelegation","capabilityInvocation","keyAgreement","get","url","TypeError","pop","didDoc"],"mappings":"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"}