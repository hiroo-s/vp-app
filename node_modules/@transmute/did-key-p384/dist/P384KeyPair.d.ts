/// <reference types="node" />
import { JsonWebKey2020 } from './types';
export declare class P384KeyPair {
    id: string;
    controller: string;
    type: string;
    publicKeyBuffer: Buffer;
    privateKeyBuffer: Buffer;
    static from: (options: any) => Promise<P384KeyPair>;
    static generate: () => Promise<P384KeyPair>;
    static fingerprintFromPublicKey({ publicKeyBase58 }: any): string;
    static fromFingerprint({ fingerprint }: any): P384KeyPair;
    constructor(options: any);
    addEncodedPublicKey(publicKeyNode: any): any;
    publicNode({ controller }?: {
        controller?: string | undefined;
    }): any;
    toJwk(exportPrivate?: boolean): {
        kid: any;
        kty: "EC";
        crv: "P-384";
        x: string;
        y: string;
    };
    toVerificationMethod(): JsonWebKey2020;
    get publicKey(): any;
    get privateKey(): any;
    fingerprint(): string;
    signer(): {
        sign(): Promise<never>;
    } | {
        sign({ data }: any): Promise<Uint8Array>;
    };
    verifier(): {
        verify(): Promise<never>;
    } | {
        verify({ data, signature }: any): Promise<boolean>;
    };
    deriveSecret({ publicKey }: any): Promise<Uint8Array>;
}
