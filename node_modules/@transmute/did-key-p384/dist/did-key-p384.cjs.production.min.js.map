{"version":3,"file":"did-key-p384.cjs.production.min.js","sources":["../src/keyUtils.ts","../src/crypto-helper/crypto-helper-node.ts","../src/ES384.ts","../src/P384KeyPair.ts","../src/types.ts","../src/driver.ts"],"sourcesContent":["import crypto from 'crypto';\nimport canonicalize from 'canonicalize';\nimport base64url from 'base64url';\nimport * as bs58 from 'bs58';\nimport { P384PublicKeyJwk, P384PrivateKeyJwk } from './types';\n\nexport const getKid = (jwk: P384PublicKeyJwk | P384PrivateKeyJwk) => {\n  const digest = crypto\n    .createHash('sha256')\n    .update(\n      canonicalize({\n        crv: jwk.crv,\n        x: jwk.x,\n        y: jwk.y,\n        kty: jwk.kty,\n      })\n    )\n    .digest();\n  return base64url.encode(Buffer.from(digest));\n};\n\nexport const publicKeyJwkToPublicKeyBase58 = (\n  publicKeyJwk: P384PublicKeyJwk\n) => {\n  const publicKeyBuffer = Buffer.concat([\n    base64url.toBuffer(publicKeyJwk.x),\n    base64url.toBuffer(publicKeyJwk.y),\n  ]);\n  return bs58.encode(publicKeyBuffer);\n};\n\nexport const publicKeyBase58toPublicKeyJwk = (publicKeyBase58: string) => {\n  const buffer = bs58.decode(publicKeyBase58);\n  const jwk: P384PublicKeyJwk = {\n    crv: 'P-384',\n    x: base64url.encode(buffer.slice(0, 48)),\n    y: base64url.encode(buffer.slice(48, 96)),\n    kty: 'EC',\n  };\n\n  return { ...jwk, kid: getKid(jwk) };\n};\n\nexport const privateKeyJwkToPrivateKeyBase58 = (\n  privateKeyJwk: P384PrivateKeyJwk\n) => {\n  return bs58.encode(base64url.toBuffer(privateKeyJwk.d));\n};\n\nexport const privateKeyBase58toPrivateKeyJwk = (\n  privateKeyBase58: string,\n  publicKeyBase58: string\n) => {\n  const publicKeyJwk = publicKeyBase58toPublicKeyJwk(publicKeyBase58);\n  return {\n    ...publicKeyJwk,\n    d: base64url.encode(bs58.decode(privateKeyBase58)),\n  };\n};\n","import { Crypto } from 'node-webcrypto-ossl';\n\nfunction isNodejs() {\n  return (\n    typeof process === 'object' &&\n    typeof process.versions === 'object' &&\n    typeof process.versions.node !== 'undefined'\n  );\n}\n\nlet crypto: Crypto;\n\nif (isNodejs()) {\n  crypto = new Crypto();\n} else {\n  crypto = window.crypto as Crypto;\n}\n\nconst generate = async () => {\n  let key = await crypto.subtle.generateKey(\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['sign', 'verify']\n  );\n  const publicKeyJwk = await crypto.subtle.exportKey('jwk', key.publicKey);\n  const privateKeyJwk = await crypto.subtle.exportKey('jwk', key.privateKey);\n  return {\n    publicKeyJwk,\n    privateKeyJwk,\n  };\n};\n\nconst sign = async (message: Uint8Array, privateKeyJwk: any) => {\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['sign']\n  );\n  const signature = await crypto.subtle.sign(\n    {\n      name: 'ECDSA',\n      hash: { name: 'SHA-384' },\n    },\n    privateKey,\n    message\n  );\n  return new Uint8Array(signature);\n};\n\nconst verify = async (\n  message: Uint8Array,\n  signature: Uint8Array,\n  publicKeyJwk: any\n) => {\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['verify']\n  );\n\n  return crypto.subtle.verify(\n    {\n      name: 'ECDSA',\n      hash: { name: 'SHA-384' },\n    },\n    publicKey,\n    signature,\n    message\n  );\n};\n\nconst deriveSecret = async (\n  privateKeyJwk: any,\n  publicKeyJwk: any\n): Promise<Uint8Array> => {\n  const privateKey = await crypto.subtle.importKey(\n    'jwk',\n    privateKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['deriveBits']\n  );\n  const publicKey = await crypto.subtle.importKey(\n    'jwk',\n    publicKeyJwk,\n    {\n      name: 'ECDH',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['deriveBits']\n  );\n  const result = await crypto.subtle.deriveBits(\n    {\n      name: 'ECDH',\n      public: publicKey,\n    },\n    privateKey,\n    256\n  );\n  return new Uint8Array(result);\n};\n\nexport { generate, sign, verify, deriveSecret };\n","import * as help from './crypto-helper';\nimport base64url from 'base64url';\n\nconst sign = async (\n  privateKeyJwk: any,\n  payload: any,\n  header: any = { alg: 'ES384' }\n) => {\n  const toBeSigned = `${base64url.encode(\n    JSON.stringify(header)\n  )}.${base64url.encode(JSON.stringify(payload))}`;\n  const signature = await help.sign(\n    new Uint8Array(Buffer.from(toBeSigned)),\n    privateKeyJwk\n  );\n  return `${toBeSigned}.${base64url.encode(Buffer.from(signature))}`;\n};\n\nconst verify = async (publicKeyJwk: any, jws: string) => {\n  const [encodedHeader, encodedPayload, encodedSignature] = jws.split('.');\n  const toBeSigned = [encodedHeader, encodedPayload].join('.');\n\n  let verified = false;\n\n  verified = await help.verify(\n    new Uint8Array(Buffer.from(toBeSigned)),\n    new Uint8Array(base64url.toBuffer(encodedSignature)),\n    publicKeyJwk\n  );\n\n  return verified;\n};\n\nconst signDetached = async (\n  privateKeyJwk: any,\n  payload: Buffer,\n  header: any = { alg: 'ES384' }\n) => {\n  const encodedHeader = base64url.encode(JSON.stringify(header));\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n  const signature = await help.sign(\n    new Uint8Array(toBeSignedBuffer),\n    privateKeyJwk\n  );\n  return `${encodedHeader}..${base64url.encode(Buffer.from(signature))}`;\n};\n\nconst verifyDetached = async (\n  publicKeyJwk: any,\n  jws: string,\n  payload: Buffer\n) => {\n  const [encodedHeader, encodedSignature] = jws.split('..');\n  const toBeSignedBuffer = Buffer.concat([\n    Buffer.from(encodedHeader + '.', 'utf8'),\n    Buffer.from(payload.buffer, payload.byteOffset, payload.length),\n  ]);\n\n  let verified = false;\n\n  verified = await help.verify(\n    new Uint8Array(Buffer.from(toBeSignedBuffer)),\n    new Uint8Array(base64url.toBuffer(encodedSignature)),\n    publicKeyJwk\n  );\n\n  return verified;\n};\n\nexport { sign, verify, signDetached, verifyDetached };\n","import base64url from 'base64url';\nimport * as bs58 from 'bs58';\nimport * as help from './crypto-helper';\n\nimport * as keyUtils from './keyUtils';\n\nimport { JsonWebKey2020, verificationMethodType } from './types';\n\nexport class P384KeyPair {\n  public id: string;\n  public controller: string;\n  public type = verificationMethodType;\n  public publicKeyBuffer: Buffer;\n  public privateKeyBuffer: Buffer;\n\n  static from = async (options: any) => {\n    return new P384KeyPair({ ...options });\n  };\n\n  static generate = async () => {\n    const key = await help.generate();\n    return P384KeyPair.from(key);\n  };\n\n  static fingerprintFromPublicKey({ publicKeyBase58 }: any) {\n    const pubkeyBytes = bs58.decode(publicKeyBase58);\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    // See https://github.com/multiformats/multicodec/blob/master/table.csv\n    // 0xef is P-384 public key\n    buffer[0] = 0xef; //\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${bs58.encode(buffer)}`;\n  }\n\n  static fromFingerprint({ fingerprint }: any) {\n    // skip leading `z` that indicates base58 encoding\n    const buffer = bs58.decode(fingerprint.substr(1));\n    // https://github.com/multiformats/multicodec/blob/master/table.csv#L77\n    if (buffer[0] === 0xef && buffer[1] === 0x01) {\n      const publicKeyBase58 = bs58.encode(buffer.slice(2));\n      const did = `did:key:${P384KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      })}`;\n      const keyId = `#${P384KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58,\n      })}`;\n      return new P384KeyPair({\n        id: keyId,\n        controller: did,\n        publicKeyBase58,\n      });\n    }\n\n    throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n  }\n\n  constructor(options: any) {\n    this.id = options.id;\n    this.controller = options.controller;\n    this.type = options.type || 'JsonWebKey2020';\n    this.publicKeyBuffer = options.publicKeyBuffer;\n    this.privateKeyBuffer = options.privateKeyBuffer;\n\n    if (options.publicKeyBase58) {\n      this.publicKeyBuffer = bs58.decode(options.publicKeyBase58);\n    }\n\n    if (options.privateKeyBase58) {\n      this.privateKeyBuffer = bs58.decode(options.privateKeyBase58);\n    }\n\n    if (options.publicKeyJwk) {\n      this.publicKeyBuffer = Buffer.concat([\n        base64url.toBuffer(options.publicKeyJwk.x),\n        base64url.toBuffer(options.publicKeyJwk.y),\n      ]);\n    }\n\n    if (options.privateKeyJwk) {\n      this.publicKeyBuffer = Buffer.concat([\n        base64url.toBuffer(options.privateKeyJwk.x),\n        base64url.toBuffer(options.privateKeyJwk.y),\n      ]);\n      this.privateKeyBuffer = Buffer.concat([\n        base64url.toBuffer(options.privateKeyJwk.d),\n      ]);\n    }\n\n    const publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    const fingerprint = P384KeyPair.fingerprintFromPublicKey({\n      publicKeyBase58,\n    });\n\n    if (!this.id) {\n      this.id = '#' + fingerprint;\n    }\n\n    if (!this.controller) {\n      this.controller = 'did:key:' + fingerprint;\n    }\n  }\n\n  addEncodedPublicKey(publicKeyNode: any) {\n    publicKeyNode.publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    return publicKeyNode;\n  }\n\n  publicNode({ controller = this.controller } = {}) {\n    const publicNode: any = {\n      id: this.id,\n      type: this.type,\n    };\n    if (controller) {\n      publicNode.controller = controller;\n    }\n    this.addEncodedPublicKey(publicNode); // Subclass-specific\n    return publicNode;\n  }\n\n  toJwk(exportPrivate: boolean = false) {\n    if (exportPrivate) {\n      return keyUtils.privateKeyBase58toPrivateKeyJwk(\n        bs58.encode(this.privateKeyBuffer),\n        bs58.encode(this.publicKeyBuffer)\n      );\n    }\n    return keyUtils.publicKeyBase58toPublicKeyJwk(\n      bs58.encode(this.publicKeyBuffer)\n    );\n  }\n\n  toVerificationMethod(): JsonWebKey2020 {\n    const publicKeyJwk = this.toJwk();\n    delete publicKeyJwk.kid;\n    return {\n      id: this.id,\n      type: verificationMethodType,\n      controller: this.controller,\n      publicKeyJwk,\n    };\n  }\n\n  get publicKey() {\n    return bs58.encode(this.publicKeyBuffer);\n  }\n\n  get privateKey() {\n    return bs58.encode(this.privateKeyBuffer);\n  }\n\n  fingerprint() {\n    const publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    return P384KeyPair.fingerprintFromPublicKey({ publicKeyBase58 });\n  }\n\n  signer() {\n    if (!this.privateKeyBuffer) {\n      return {\n        async sign() {\n          throw new Error('No private key to sign with.');\n        },\n      };\n    }\n    let privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    let publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    let privateKeyJwk = keyUtils.privateKeyBase58toPrivateKeyJwk(\n      privateKeyBase58,\n      publicKeyBase58\n    );\n    return {\n      async sign({ data }: any) {\n        const signature = help.sign(data, privateKeyJwk);\n        return signature;\n      },\n    };\n  }\n\n  verifier() {\n    if (!this.publicKeyBuffer) {\n      return {\n        async verify() {\n          throw new Error('No public key to verify with.');\n        },\n      };\n    }\n    let publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    let publicKeyJwk = keyUtils.publicKeyBase58toPublicKeyJwk(publicKeyBase58);\n    return {\n      async verify({ data, signature }: any) {\n        return help.verify(data, signature, publicKeyJwk);\n      },\n    };\n  }\n\n  async deriveSecret({ publicKey }: any) {\n    let privateKeyBase58 = bs58.encode(this.privateKeyBuffer);\n    let publicKeyBase58 = bs58.encode(this.publicKeyBuffer);\n    let privateKeyJwk = keyUtils.privateKeyBase58toPrivateKeyJwk(\n      privateKeyBase58,\n      publicKeyBase58\n    );\n    const secret = await help.deriveSecret(\n      privateKeyJwk,\n      publicKey.publicKeyJwk\n    );\n    return secret;\n  }\n}\n","export const verificationMethodType = 'JsonWebKey2020';\n\nexport type P384PublicKeyJwk = {\n  kty: 'EC';\n  crv: 'P-384';\n  x: string;\n  y: string;\n  kid?: string;\n};\n\nexport type P384PrivateKeyJwk = {\n  kty: 'EC';\n  crv: 'P-384';\n  x: string;\n  y: string;\n  d: string;\n  kid?: string;\n};\n\nexport type JsonWebKey2020PublicKeyJwk = P384PublicKeyJwk;\nexport type JsonWebKey2020PrivateKeyJwk = P384PrivateKeyJwk;\n\nexport type JsonWebKey2020 = {\n  id: string;\n  type: 'JsonWebKey2020';\n  controller: string;\n  publicKeyJwk: JsonWebKey2020PublicKeyJwk;\n  privateKeyJwk?: JsonWebKey2020PrivateKeyJwk;\n};\n","import { P384KeyPair } from './P384KeyPair';\n\nexport const computeKeyId = async ({ key }: any) => {\n  return `did:key:${key.fingerprint()}#${key.fingerprint()}`;\n};\n\nexport const keyToDidDoc = (secp256k1Key: P384KeyPair) => {\n  const did = `did:key:${secp256k1Key.fingerprint()}`;\n  const publicKeyJwk = secp256k1Key.toJwk();\n  const keyId = `#${publicKeyJwk.kid}`;\n  delete publicKeyJwk.kid;\n  return {\n    '@context': [\n      'https://www.w3.org/ns/did/v1',\n      {\n        '@base': did,\n      },\n    ],\n    id: did,\n    publicKey: [\n      {\n        id: keyId,\n        type: secp256k1Key.type,\n        controller: did,\n        publicKeyJwk,\n      },\n    ],\n    authentication: [keyId],\n    assertionMethod: [keyId],\n    capabilityDelegation: [keyId],\n    capabilityInvocation: [keyId],\n    keyAgreement: [keyId],\n  };\n};\n\nexport const get = async ({ did, url }: any = {}) => {\n  did = did || url;\n  if (!did) {\n    throw new TypeError('\"did\" must be a string.');\n  }\n  const fingerprint = did\n    .split('#')[0]\n    .split('did:key:')\n    .pop();\n  const publicKey = await P384KeyPair.fromFingerprint({ fingerprint });\n  const didDoc = keyToDidDoc(publicKey);\n  return didDoc;\n};\n"],"names":["crypto","getKid","jwk","digest","createHash","update","canonicalize","crv","x","y","kty","base64url","encode","Buffer","from","publicKeyBase58toPublicKeyJwk","publicKeyBase58","buffer","bs58","slice","kid","privateKeyBase58toPrivateKeyJwk","privateKeyBase58","d","publicKeyJwk","publicKeyBuffer","concat","toBuffer","privateKeyJwk","process","versions","node","Crypto","window","sign","message","subtle","importKey","name","namedCurve","privateKey","hash","signature","Uint8Array","verify","publicKey","payload","header","alg","toBeSigned","JSON","stringify","help","jws","split","encodedSignature","join","encodedHeader","toBeSignedBuffer","byteOffset","length","P384KeyPair","options","id","controller","type","privateKeyBuffer","this","fingerprint","fingerprintFromPublicKey","pubkeyBytes","set","fromFingerprint","substr","did","keyId","Error","addEncodedPublicKey","publicKeyNode","publicNode","toJwk","exportPrivate","keyUtils","toVerificationMethod","signer","data","verifier","deriveSecret","deriveBits","result","generateKey","key","exportKey","keyToDidDoc","secp256k1Key","authentication","assertionMethod","capabilityDelegation","capabilityInvocation","keyAgreement","url","TypeError","pop"],"mappings":"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"}