import { LdKeyPairInstance } from '@transmute/ld-key-pair';
import { GenerateKeyOpts, JsonWebKey2020, KeyPairOptions, P256Key2021, P384Key2021, P521Key2021 } from './types';
export declare class KeyPair implements LdKeyPairInstance {
    id: string;
    type: string;
    controller: string;
    publicKey: CryptoKey;
    privateKey?: CryptoKey;
    static generate: (opts?: GenerateKeyOpts) => Promise<KeyPair>;
    static from: (k: JsonWebKey2020 | P256Key2021 | P384Key2021 | P521Key2021) => Promise<KeyPair>;
    static fingerprintFromPublicKey(publicKey: JsonWebKey2020 | P256Key2021 | P384Key2021 | P521Key2021): Promise<string>;
    static fromFingerprint({ fingerprint }: {
        fingerprint: string;
    }): Promise<KeyPair>;
    constructor(opts: KeyPairOptions);
    fingerprint(): Promise<string>;
    export(options?: {
        privateKey?: boolean;
        type: 'JsonWebKey2020' | 'P521Key2021' | 'P384Key2021' | 'P256Key2021';
    }): Promise<JsonWebKey2020 | P521Key2021 | P384Key2021 | P256Key2021>;
    toJsonWebKeyPair(exportPrivateKey?: boolean): Promise<JsonWebKey2020>;
    signer(type?: 'Ecdsa'): import("./types").Signer;
    verifier(type?: 'Ecdsa'): import("./types").Verifier;
    deriveSecret({ publicKey, }: {
        publicKey: JsonWebKey2020 | P256Key2021 | P384Key2021 | P521Key2021;
    }): Promise<Uint8Array>;
}
